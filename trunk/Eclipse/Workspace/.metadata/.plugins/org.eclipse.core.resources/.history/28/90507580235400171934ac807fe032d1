package ch.mitdom.compresstutorial;

import java.awt.Color;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import javax.swing.BoxLayout;
import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingConstants;

public class CompressorGui extends JFrame implements ActionGui{
	
	//Main Panels
	JPanel panTitle;
	JPanel panExecute;
	JPanel panSelectors;
	GridBagConstraints gbcMain;
	GridBagConstraints gbcSelectors;
	//SelectorPanels
	JPanel panDestinationSelector;
	JPanel panSourceSelector;
	JPanel panSelectedFiles;
	//Title
	JLabel labTitle;
	//DestinationSelector
	GridBagConstraints gbcDest;
	JButton btnSelectDestinationFolder;
	JLabel labSelectedDestinationFolderTag;
	JLabel labSelectedDestinationFolder;
	JLabel labDestinationFileName;
	JTextField txtDestinationFileName;
	ArrayList<JRadioButton> radFiletypeGroup;
	JRadioButton radDestinationFiletypeZIP;
	JRadioButton radDestinationFiletype7z;
	ButtonGroup grpDestinationFiletypeGroup;
	JPanel panRadioButtons;
	//SourceSelector
	GridBagConstraints gbcSource;
	JLabel labSelectSource;
	JButton btnSeletSource;
	JLabel labSelectedFilesTitle;
	JTextArea txtSelectedFiles;
	JScrollPane sclSelectedFiles;
	//ExecutePanel
	GridBagConstraints gbcExecute;
	JButton btnExecute;
	JProgressBar prgExecutionProgressBar;
	JTextArea txtExecutionProgress;
	JScrollPane sclExecutionProgress;
	
	//File Management
	File destinationFolder;
	File destination;
	File[] files;
	
	//Compressor
	ICompressor compressor;
	CompressorFactory compressorFactory;
	
	/**
	 * Erstellt ein CompressorGui mit Hilfe des GridBagLayouts
	 */
	public CompressorGui(){
		this.setSize(1024,768);
		this.setLayout(new GridBagLayout());
		files = null;
		compressorFactory = new CompressorFactory();
		init();
		this.addWindowListener(new GuiListener());
		this.setLocationRelativeTo(null);
		this.setVisible(true);
	}

	/**
	 * Breite die Compression vor
	 */
	public void prepareCompress(){
		String selectedFileType = "";
		btnExecute.setEnabled(false); //Disable den Execution Button
		//*********
		//Überprüfen ob alle Daten gesetzt sind
		if(destinationFolder == null) {
			JOptionPane.showMessageDialog(this, "Kein Zielpfad ausgewählt!", "Warnung", JOptionPane.WARNING_MESSAGE);
			btnExecute.setEnabled(true);
			return;
		}
		if(txtDestinationFileName.getText().equals("")){
			JOptionPane.showMessageDialog(this, "Kein Dateiname gesetzt!", "Warnung", JOptionPane.WARNING_MESSAGE);
			btnExecute.setEnabled(true);
			return;
		}
		
		for(JRadioButton radButton : radFiletypeGroup){
			if(radButton.isSelected()){
				selectedFileType = radButton.getActionCommand();
				btnExecute.setEnabled(true);
				break;
			}
		}
		if(selectedFileType.equals("")){
			JOptionPane.showMessageDialog(this, "Kein Dateityp ausgewählt!", "Warnung", JOptionPane.WARNING_MESSAGE);
			btnExecute.setEnabled(true);
			return;
		}
		
		if(files == null){
			JOptionPane.showMessageDialog(this, "Keine Dateien ausgewählt!", "Warnung", JOptionPane.WARNING_MESSAGE);
			return;
		}
		//*************
		
		//Setze den Zielpfad für die entpackten Daten
		if(destinationFolder != null && txtDestinationFileName.getText() != "" && selectedFileType != "" && files!=null ){
			destination = new File(destinationFolder.getAbsolutePath()+"\\"+txtDestinationFileName.getText()+selectedFileType);
		}
		
		//ProgressBar vorbereiten
		prgExecutionProgressBar.setMinimum(0);
		prgExecutionProgressBar.setMaximum(files.length);
		prgExecutionProgressBar.setValue(0);
		prgExecutionProgressBar.setVisible(true);
		prgExecutionProgressBar.setStringPainted(true);
		this.revalidate();
		
		//Neuen Compressor aus Factory holen und überprüfen
		compressor = compressorFactory.getCompressor(selectedFileType, this);
		if(compressor == null){
			JOptionPane.showMessageDialog(this, "Kein Kompressor gefunden!", "Warnung", JOptionPane.WARNING_MESSAGE);
			return;
			}
		
		//Zielpfad und Quelle setzen
		compressor.setDestination(destination);
		compressor.setSource(files);
		
	}
	
	/**
	 * Zielpfad setzen
	 * @param Zielpfad als File
	 */
	public void setDestination(File destination){
		if(destination == null){
			JOptionPane.showMessageDialog(this, "Kein Pfad gewählt!", "Warnung", JOptionPane.WARNING_MESSAGE);
			return;
		}
		this.destinationFolder = destination;
		labSelectedDestinationFolder.setText(destinationFolder.getAbsolutePath());
	}
	
	/**
	 * Quelldateien setzen
	 * @param sourceFiles Eine oder mehrere Dateien als Array vom Typ File[]
	 */
	public void setFiles(File[] sourceFiles){
		if(sourceFiles==null){
			JOptionPane.showMessageDialog(this, "Keine Dateien ausgewählt!", "Warnung", JOptionPane.WARNING_MESSAGE);
			return;
		}
		if(files==null){ //Wenn es die ersten Dateien sind
			this.files = sourceFiles;
		}
		
		else{ //Wenn schon Dateien gewählt wurden
			File[] tempFiles = files;
			int lengthFileOld = tempFiles.length;
			int lengthFileNew = sourceFiles.length;
			files = new File[lengthFileOld+lengthFileNew];
			System.arraycopy(tempFiles, 0, files, 0, lengthFileOld);
			System.arraycopy(sourceFiles, 0, files, lengthFileOld, lengthFileNew);
		}
		
		//Den Namen mit Pfad jeder Quelldatei in das Textfeld schreiben
		for(File file : sourceFiles){
			txtSelectedFiles.append(file.getAbsolutePath() + "\n");
		}		
	}
	
	/**
	 * ProgressBar aktualisieren
	 * @param progress Anzahl bearbeitete Files
	 * @param filename Name der Bearbeiteten Datei
	 * @param length Anzahl Dateien
	 */
	public void setProgress(int progress, String filename, int length){
		if(files != null && progress>0 && progress<=files.length){
			prgExecutionProgressBar.setValue(progress);
			prgExecutionProgressBar.setString(progress + "/" + length + " compressed");
			txtExecutionProgress.append(filename + ".......done!\n");
			this.revalidate();
		}
	}
	
	/**
	 * Setze den Executon Button anhand des Resultats der Kompression
	 * @param result true=alles erldigt; false=Fehler
	 */
	public void setBtnExecute(boolean result){
		for(ActionListener al : btnExecute.getActionListeners()){
			btnExecute.removeActionListener(al);
		}
		btnExecute.addActionListener(new ReturnListener(this));
		if(result){
			btnExecute.setForeground(Color.GREEN);
			btnExecute.setText("Fertig. Zurück?");
		}
		
		else{
			btnExecute.setForeground(Color.RED);
			btnExecute.setText("Fehler. Zurück?");
		}
	}
	
	/**
	 * Getter für Kompressor
	 * @return Kompressor als ICompressor
	 */
	public ICompressor getCompressor(){
		return compressor;
	}
	
	/**
	 * Kehre zum MainGui zurück
	 */
	public void backToMain(){
		new MainGui();
		this.dispose();
	}
	
	/**
	 * GUI Initialisieren
	 */
	private void init(){
		//********
		//Title
		//********
		labTitle = new JLabel("Compressor");
		labTitle.setFont(new Font("Arial",Font.BOLD,30));
		labTitle.setForeground(Color.BLUE);
		labTitle.setHorizontalAlignment(SwingConstants.CENTER);
		panTitle = new JPanel();
		panTitle.add(labTitle);
		
		
		//********
		//Selectors
		//********
		panSelectors = new JPanel(new GridBagLayout());
		gbcSelectors = new GridBagConstraints();
		gbcSelectors.fill = GridBagConstraints.NONE;
		//***DestinationSelector
		panDestinationSelector = new JPanel(new GridBagLayout());
		gbcDest = new GridBagConstraints();
		gbcDest.fill = GridBagConstraints.HORIZONTAL;
		
		labSelectedDestinationFolderTag = new JLabel("Zielordner wählen");
		labSelectedDestinationFolderTag.setFont(new Font("Arial", Font.BOLD, 14));
		labSelectedDestinationFolderTag.setForeground(Color.BLUE);
		gbcDest.weightx = 0.75;
		gbcDest.gridwidth = 2;
		gbcDest.gridheight = 1;
		gbcDest.gridx = 0;
		gbcDest.gridy = 0;
		gbcDest.insets = new Insets(0,0,10,100);
		panDestinationSelector.add(labSelectedDestinationFolderTag, gbcDest);
		
		btnSelectDestinationFolder = new JButton("Wählen...");
		btnSelectDestinationFolder.addActionListener(new ChooseDestinationListener(this));
		gbcDest.weightx = 0.25;
		gbcDest.gridwidth = 1;
		//gbcDest.gridheight = 1;
		gbcDest.gridx = 2;
		//gbcDest.gridy = 0;
		gbcDest.insets = new Insets(0,0,10,10);
		panDestinationSelector.add(btnSelectDestinationFolder, gbcDest);
		
		labSelectedDestinationFolderTag = new JLabel("Ausgewählter Ordner");
		gbcDest.weightx = 0.75;
		gbcDest.gridwidth = 2;
		//gbcDest.gridheight = 1;
		gbcDest.gridx = 0;
		gbcDest.gridy = 1;
		panDestinationSelector.add(labSelectedDestinationFolderTag, gbcDest);
		
		labDestinationFileName = new JLabel("Dateiname");
		gbcDest.weightx = 0.25;
		gbcDest.gridwidth = 1;
		//gbcDest.gridheight = 1;
		gbcDest.gridx = 2;
		//gbcDest.gridy = 1;
		panDestinationSelector.add(labDestinationFileName, gbcDest);
		
		labSelectedDestinationFolder = new JLabel();
		gbcDest.weightx = 0.75;
		gbcDest.gridwidth = 2;
		//gbcDest.gridheight = 1;
		gbcDest.gridx = 0;
		gbcDest.gridy = 2;
		panDestinationSelector.add(labSelectedDestinationFolder, gbcDest);
		
		txtDestinationFileName = new JTextField();
		txtDestinationFileName.setText("");
		gbcDest.weightx = 0.25;
		gbcDest.gridwidth = 1;
		//gbcDest.gridheight = 1;
		gbcDest.gridx = 2;
		gbcDest.gridy = 2;
		panDestinationSelector.add(txtDestinationFileName, gbcDest);
		
		radFiletypeGroup = new ArrayList<JRadioButton>();
		radDestinationFiletypeZIP = new JRadioButton(".zip");
		radDestinationFiletypeZIP.setActionCommand(".zip");
		radDestinationFiletypeZIP.setSelected(true);
		radDestinationFiletype7z = new JRadioButton(".7z");
		radDestinationFiletype7z.setActionCommand(".7z");
		radFiletypeGroup.add(radDestinationFiletypeZIP);
		radFiletypeGroup.add(radDestinationFiletype7z);
		
		grpDestinationFiletypeGroup = new ButtonGroup();
		grpDestinationFiletypeGroup.add(radDestinationFiletypeZIP);
		grpDestinationFiletypeGroup.add(radDestinationFiletype7z);
		panRadioButtons = new JPanel();
		panRadioButtons.setLayout(new BoxLayout(panRadioButtons, BoxLayout.Y_AXIS));
		panRadioButtons.add(radDestinationFiletypeZIP);
		panRadioButtons.add(radDestinationFiletype7z);
		gbcDest.insets = new Insets(0,0,40,10);
		gbcDest.weightx = 1.0;
		//gbcDest.gridwidth = 1;
		gbcDest.gridheight = grpDestinationFiletypeGroup.getButtonCount();
		gbcDest.gridx = 3;
		//gbcDest.gridy = 2;
		panDestinationSelector.add(panRadioButtons, gbcDest);
		
		//***SourceSelector
		gbcSource = new GridBagConstraints();
		panSourceSelector = new JPanel(new GridBagLayout());
		gbcSource.fill = GridBagConstraints.HORIZONTAL;
		
		labSelectSource = new JLabel("Dateien wählen:");
		labSelectSource.setFont(new Font("Arial", Font.BOLD, 14));
		labSelectSource.setForeground(Color.BLUE);
		gbcSource.weightx = 0.75;
		gbcSource.gridwidth = 2;
		gbcSource.gridheight = 1;
		gbcSource.gridx = 0;
		gbcSource.gridy = 0;
		gbcSource.insets = new Insets(0,25,10,100);
		panSourceSelector.add(labSelectSource, gbcSource);
		
		btnSeletSource = new JButton("Wählen");
		btnSeletSource.addActionListener(new ChooseFilesListener(this));
		gbcSource.weightx = 0.25;
		gbcSource.gridwidth = 1;
		gbcSource.gridheight = 1;
		gbcSource.gridx = 2;
		gbcSource.gridy = 0;
		gbcSource.insets = new Insets(0,15,10,100);
		panSourceSelector.add(btnSeletSource, gbcSource);
		
		labSelectedFilesTitle = new JLabel("Ausgewählte Dateien");
		gbcSource.weightx = 0.75;
		gbcSource.gridwidth = 2;
		gbcSource.gridheight = 1;
		gbcSource.gridx = 0;
		gbcSource.gridy = 1;
		gbcSource.insets = new Insets(0,25,10,0);
		panSourceSelector.add(labSelectedFilesTitle, gbcSource);
		
		txtSelectedFiles = new JTextArea(10,1);
		txtSelectedFiles.setEditable(false);
		sclSelectedFiles = new JScrollPane(txtSelectedFiles);
		gbcSource.weightx = 1.0;
		gbcSource.gridwidth = 3;
		gbcSource.gridheight = 1;
		gbcSource.gridx = 0;
		gbcSource.gridy = 2;
		gbcSource.insets = new Insets(0,10,60,0);
		panSourceSelector.add(sclSelectedFiles, gbcSource);
		
		//********
		//Build Selectors
		//********
		gbcSelectors.gridx = 0;
		gbcSelectors.gridy = 0;
		panSelectors.add(panDestinationSelector, gbcSelectors);
		gbcSelectors.gridy = 1;
		panSelectors.add(panSourceSelector, gbcSelectors);
		
		//*********
		//Execute
		//*********
		panExecute = new JPanel(new GridBagLayout());
		gbcExecute = new GridBagConstraints();
		gbcExecute.fill = GridBagConstraints.NONE;
		
		btnExecute = new JButton("Compress");
		btnExecute.addActionListener(new CompressListener(this));
		gbcExecute.weightx = 0.2;
		gbcExecute.gridwidth = 1;
		gbcExecute.gridheight = 1;
		gbcExecute.gridx = 2;
		gbcExecute.gridy = 0;
		gbcExecute.insets = new Insets(0,0,10,0);
		panExecute.add(btnExecute, gbcExecute);
		
		txtExecutionProgress = new JTextArea(5,1);
		txtExecutionProgress.setEditable(false);
		sclExecutionProgress = new JScrollPane(txtExecutionProgress);
		gbcExecute.fill = GridBagConstraints.HORIZONTAL;
		gbcExecute.weightx = 1.0;
		gbcExecute.gridwidth = 5;
		gbcExecute.gridheight = 1;
		gbcExecute.gridx = 0;
		gbcExecute.gridy = 1;
		gbcExecute.insets = new Insets(0,0,60,0);
		panExecute.add(sclExecutionProgress, gbcExecute);
		
		prgExecutionProgressBar = new JProgressBar();
		prgExecutionProgressBar.setVisible(false);
		gbcExecute.fill = GridBagConstraints.HORIZONTAL;
		gbcExecute.gridwidth = 5;
		gbcExecute.gridheight = 1;
		gbcExecute.gridx = 0;
		gbcExecute.gridy = 2;
		gbcExecute.insets = new Insets(0,0,10,0);
		panExecute.add(prgExecutionProgressBar, gbcExecute);
	
		//*********
		//Build GUI
		//*********
		gbcMain = new GridBagConstraints();
		gbcMain.fill = GridBagConstraints.NONE;
		gbcMain.gridx = 0;
		gbcMain.gridy = 0;
		gbcMain.anchor = GridBagConstraints.NORTH;
		this.add(panTitle, gbcMain);
		gbcMain.gridx = 0;
		gbcMain.gridy = 1;
		gbcMain.weighty = 1.0;
		this.add(panSelectors, gbcMain);
		gbcMain.fill = GridBagConstraints.HORIZONTAL;
		gbcMain.gridx = 0;
		gbcMain.gridy = 2;
		gbcMain.weighty = 1.0;
		this.add(panExecute, gbcMain);
	}
	
	
}
