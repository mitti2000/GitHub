package ch.mitdom.compresstutorial;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;

import org.apache.commons.compress.archivers.zip.*;

public class DecompressorZip implements IDecompressor {
	File source;
	File destination;
	int length;
	int index;

	public boolean decompress(DecompressorGui decompressorGui) {
		source = decompressorGui.getSource();
		length = 0;
		index = 0;
		destination = decompressorGui.getDestination();
		try {
            InputStream sourceStream = new FileInputStream(source);
            InputStream tempStream = new FileInputStream(source);
			ZipArchiveInputStream archive = new ZipArchiveInputStream(sourceStream);
			
			ZipArchiveInputStream tempArchive = new ZipArchiveInputStream(tempStream);
			ZipArchiveEntry tempEntry;
			while((tempEntry = tempArchive.getNextZipEntry()) != null){
				if (!tempEntry.isDirectory())length++;
			}
			
			ZipArchiveEntry  entry;
			while ((entry = archive.getNextZipEntry()) != null) {
				String name = entry.getName();
				if (!entry.isDirectory()) { // skipping directories
					ByteArrayOutputStream content = new ByteArrayOutputStream();
					byte[] buffer = new byte[1024];
					int bytesRead;
					while ((bytesRead = archive.read(buffer)) != -1) {
						content.write(buffer, 0, bytesRead);
					}
					File destFile = new File(destination, name);
					File destFolder = destFile.getParentFile();
					destFolder.mkdirs();
					OutputStream ouputStream = new FileOutputStream(destFile);
					content.writeTo(ouputStream);
					index++;
					decompressorGui.setProgress(index, destination.getAbsolutePath()+"\\"+name, length);
				}
			}
			
			archive.close();
			return true;
		} 
		catch (Exception e) {
			System.out.println(e.getMessage());
			return false;
		}
	}

}