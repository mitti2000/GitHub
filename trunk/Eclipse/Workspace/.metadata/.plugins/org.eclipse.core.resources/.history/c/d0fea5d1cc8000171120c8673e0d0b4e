package ch.mitti.trees;

public class TreeImplwork implements Tree{
	
	private Node root=null;
	
	private int hoehe=0;
	private int anzKnoten=0;
	private double pfadlaenge = 0;
	
//-------------------------- Oeffentliche Methoden -----------------------------------------
	
	/**
	 * Element einfügen
	 * @param e einzufügendes Element
	 *  @return true: Element eingefügt
	 */
	public boolean insert(Element e)
	{
		root = insertTree(root,e);
		return true;
		
	}
	
	/**
	 * Element suchen
	 * @param id Schlüssel des zu suchenden Elementes
	 *  @return gesuchtes Element; null : Element nicht gefunden
	 */
	public Element search(int id)
	{
		Element e = search(root, id);
		return e;
		
	}
	
	/**
	 * Element suchen (nicht rekursive Variante)
	 * @param id Schlüssel des zu suchenden Elementes
	 *  @return gesuchtes Element; null : Element nicht gefunden
	 */
	public Element search2(int id)
	{
		Element e = search2(root, id);
		return e;
		
	}
	
	/**
	 * Element löschen 
	 * @param id Schlüssel des zu löschenden Elementes
	 */
	public void delete(int id)
	{
		root = delete(root,id);
	}
	
	/**
	 * Baum ausgeben (Inorder 
	 */
	public void show()
	{
		showInorder(root);
	}
	
	/**
	 * Höhe des Baums bestimmen
	 * @return Höhe des Baumes
	 */
	public int height()
	{
		hoehe = 0;
		height(root,0);
		return hoehe;
	}
	
	/**
	 * Durchschnittliche Pfadlänge des Baums bestimmen
	 * @return Durchschnittliche Pfadlänge
	 */
	public double length()
	{
		pfadlaenge = 0;
		anzKnoten = 0;
		length(root, 0);
		return (pfadlaenge/anzKnoten);
	}
	
	
//-------------------------- Private Methoden -----------------------------------------
	
	private void showInorder(Node r)
	{
		//links, wurzel, rechts
		if(r==null) return;
		showInorder(r.getLeft());
		System.out.println(r.getItem().getId() + ": " + r.getItem().getName());
		showInorder(r.getRight());
		
	}
	
	private Element search(Node r, int id)
	{
		if(r==null) return null;
		if(r.getItem().getId()==id) return r.getItem();
		if(id<r.getItem().getId()) return search(r.getLeft(),id);
		else return(search(r.getRight(),id));
	}
	
	/**
	 * nicht rekursive Variante von search
	*/
	private Element search2(Node root, int id)
	{
		return null;
	}
	
	private Node delete(Node root, int id)
	{
		return null;
	}
	
	private Node insertTree(Node root, Element e)
	{
		Node neu;
		if(root==null){
			neu = new Node();
			neu.setItem(e);
			root=neu;
		}
		else{
			if(root.getItem().getId()>e.getId()) root.setLeft(insertTree(root.getLeft(),e));
			else if (root.getItem().getId()<e.getId()) root.setRight(insertTree(root.getRight(),e));
		}
		return root;
	}
	

	private void height(Node root, int h)
	{
		if(root==null) return;
		int h = h+1;
		if(this.h>hoehe) hoehe=h;
		root.getLeft();
		
	}
	
	private void length(Node root, int h)
	{
		
	}

}

