package ch.mitdom.compresstutorial;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Iterator;

import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;

public class Decompressor7z implements IDecompressor {
	File source;
	File destination;
	int length;
	int index;

	public boolean decompress(DecompressorGui decompressorGui) {
		length = 0;
		index = 0;
		source = decompressorGui.getSource();
		destination = decompressorGui.getDestination();
		try {
			SevenZFile archive = new SevenZFile(source); //Quelldatei als Datenquellesetzen
			Iterable<SevenZArchiveEntry> entries = archive.getEntries();
			Iterator it = entries.iterator();
			while(it.hasNext()){
				it.next();
				length++;
			}
			
			SevenZArchiveEntry entry;
			while ((entry = archive.getNextEntry()) != null) {
				String name = entry.getName();
				if (!entry.isDirectory()) { // skipping directories
					ByteArrayOutputStream content = new ByteArrayOutputStream();
					byte[] buffer = new byte[1024];
					int bytesRead;
					while ((bytesRead = archive.read(buffer)) != -1) {
						content.write(buffer, 0, bytesRead);
					}
					
					OutputStream outputStream = new FileOutputStream(new File(destination, name));
					content.writeTo(outputStream);
					index++;
					decompressorGui.setProgress(index, destination.getAbsolutePath()+"\\"+name, length);
				}
			}
		} 
		catch (Exception e) {
			System.out.println(e.getMessage());
			return false;
		}
		return true;
	}

}
