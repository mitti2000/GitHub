package ch.mitdom.compresstutorial;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Iterator;

import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;

public class Decompressor7z implements IDecompressor {
	File source;
	File destination;
	int length;
	int index;

	public boolean decompress(DecompressorGui decompressorGui) {
		length = 0;
		index = 0;
		source = decompressorGui.getSource();
		destination = decompressorGui.getDestination();
		try {
			SevenZFile archive = new SevenZFile(source); //Quelldatei als Datenquelle setzen
			
			//********
			//Anzahl der Quelldateien ermitteln für Progress Bar
			//********
			Iterable<SevenZArchiveEntry> entries = archive.getEntries();
			Iterator<SevenZArchiveEntry> it = entries.iterator();
			while(it.hasNext()){
				it.next();
				length++;
			}
			//********
			
			SevenZArchiveEntry entry; //Neuen Eintrag erstellen
			while ((entry = archive.getNextEntry()) != null) { //Solange das Archiv noch Einträge hat die nächste Datei lesen
				String name = entry.getName(); //Name der Datei
				if (!entry.isDirectory()) { // Ordner überspringen
					ByteArrayOutputStream content = new ByteArrayOutputStream(); //Neuen ByteOutputStream anlegen
					byte[] buffer = new byte[1024]; //byte der Grösse 1MB
					int bytesRead;
					while ((bytesRead = archive.read(buffer)) != -1) { //Solange in der Datei noch Daten vorhanden sind
						content.write(buffer, 0, bytesRead); // den Inhalt des Buffers in den ByteOutputStream schreiben
					}
					File destFile = new File(destination, name); //Zielfile anlegen
					File destFolder = destFile.getParentFile(); //Zielordner anlegen
					destFolder.mkdirs(); //Zielordner im Dateisystem anlegen wenn noch nicht vorhanden
					OutputStream outputStream = new FileOutputStream(destFile); //Einen neuen OutputStream anlegen
					content.writeTo(outputStream); //Inhalt der Datei in den OutputStream schreiben
					outputStream.close(); //Output Stream schliessen
					index++; //index erhöhen
					decompressorGui.setProgress(index, destination.getAbsolutePath()+"\\"+name, length);
				}
			}
			archive.close();
		} 
		catch (Exception e) {
			System.out.println(e.getMessage());
			return false;
		}
		return true;
	}

}
