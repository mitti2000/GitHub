package ch.mitdom.compresstutorial;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.zip.ZipOutputStream;

import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.compress.utils.IOUtils;

public class CompressorZIP implements ICompressor {
	File destinationPath;
	File[] source;
	File destination;
	CompressorGui compressorGui;
	
	/**
	 * Konstruktor erwartet eine Referenz auf das aufrufende GUI
	 * @param compressorGui GUI vom Typ CompressorGui
	 */
	public CompressorZIP (CompressorGui compressorGui){
		this.compressorGui = compressorGui;
	}
	
	@Override
	public void setDestination(File destinationPath){
		this.destination = new File(destinationPath.getAbsolutePath());
	}
		
	@Override
	public void setSource(File[] source){
		this.source = source;
	}
	
	@Override
	public boolean compress(){
		if(source == null || destination == null) return false; //Überprüfe ob alles da ist
		else{
			try {
				OutputStream archiveStream = new FileOutputStream(destination); //Erstelle einen OutputStream mit der Zieldatei als Parameter
				ArchiveOutputStream archive; //Lege einen ArchiveOutputStream an
				try {
					//Create Destination Archive
					//Die ArchiveStreamFactory gibt einen ArchiveOutputStream vom gewünschten Typ zurück
					//1. Parameter: String des gewünschten Archivers
					//2. Parameter: OutputStream wohin die Daten geschrieben werden sollen
					archive = new ArchiveStreamFactory().createArchiveOutputStream(ArchiveStreamFactory.ZIP, archiveStream);
					
					int index = 0;
					//Für jedes File wird...
					for(File file : source){
						//... ein ZipArchiveEntry(Eintrag) erstellt. Als Parameter wird der gewünschte Name der Datei im ZipFile erwartet (String)
						ZipArchiveEntry entry = new ZipArchiveEntry(file.getName());
						archive.putArchiveEntry(entry); //Der Eintrag wird dem OutputStream angehängt 
						BufferedInputStream input = new BufferedInputStream(new FileInputStream(file));  //Die Datei wird über einen BufferedInputStream eingelesen
						IOUtils.copy(input, archive);//Die ausgelesenen Daten werden in den OutputStream kopiert
						input.close();  //Der InputStream wird geschlossen
						archive.closeArchiveEntry(); //Der Eintrag wird geschlossen
						
						index++; //index erhöhen
						setProgress(index, file.getName(), source.length); //ProgressBar aktualisieren
					}
					
					archive.close(); //Das Zufügen von Einträgen wird abgeschlosse, und der Stream geschlossen
					archiveStream.close(); //Das Zufügen von Streams zum Archiv wird abgeschlossen und der Stream geschlossen
					return true;
				} catch (ArchiveException e) {
					e.printStackTrace();
				}
				
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return false;
	}
	
	@Override
	public void setProgress(int progress, String fileName, int length){
		compressorGui.setProgress(progress, fileName, length);
	}

}
